// "Строгий режим", использующийся для возможности активации устаревшего кода
// "use strict";

alert('Hello, World (from JavaScript)');

// В JS можно не ставить точку с запятой ';', т.к. JS интерпретирует перенос строки как 
// неявную точку с запятой. Это называется "автоматическая вставка точки с запятой"

// Но реккомендуется ставить точку с запятой, т.к. это считается "хорошим тоном" и широко принято
// среди сообщества разработчиков

alert('Следующее сообщение');

// В старых версиях JS использовалось ключевое слово var для определения типа данных переменной
// в новых версиях используется тип данных let. Реккомендуется использовать именно его

// При именовании переменных необходимо помнить, что JS регистрозависимый язык. Соответственно,
// переменные Apple и apple - разные переменные
let variable_1 = '123';
let variable_2 = 18;
let variable_3 = 0xFFFFFF

alert(variable_1 + '\n' + variable_2 + '\n' + variable_3);
 
// Строковое значение в JS заключено в кавычки. В JS используется 3 типа кавычек:
// 1) "текст" или 'текст' - равнозначные кавычки. Между ними нет разницы
// 2) `текст ${имя_переменной}` - обратные кавычки. Используются для встраивания других переменных
let stringVariable = `Вывод на экран значения переменной: ${variable_2}`;

// На экран будет выведено "Вывод на экран значения переменной: 18"
alert(stringVariable);

// В JavaScript есть 8 основных типов данных.

// Семь из них называют «примитивными» типами данных:
//    1) number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
//    2) bigint для целых чисел произвольной длины.
//    3) string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
//    4) boolean для true/false.
//    5) null для неизвестных значений – отдельный тип, имеющий одно значение null.
//    6) undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
//    7) symbol для уникальных идентификаторов.
// И один не является «примитивным» и стоит особняком:
//    8) object для более сложных структур данных.

// Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной. 
// Имеет две формы: typeof x или typeof(x).
// Возвращает строку с именем типа. Например, "string".
// Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.